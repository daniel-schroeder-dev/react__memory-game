{"version":3,"sources":["Header.js","Card.js","WinnerBanner.js","Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","onClick","Card","style","backgroundColor","showColor","matched","color","e","handleClick","id","WinnerBanner","showBanner","type","Instructions","App","createColorsArray","basicColors","colors","i","Math","floor","random","length","includes","filter","basicColor","push","NUM_CARDS","createCards","map","key","numClicks","state","lastClickedCardId","setState","cards","checkForMatchedCards","setTimeout","NUM_ROUNDS","initNewGame","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc961331.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nfunction Header(props) {\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__page-title\">Memory Game</h1>\n      <nav>\n        <ul className=\"header__nav-items\">\n          <li className=\"header__nav-item\" onClick={props.onClick}>New Game</li>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nfunction Card(props) {\n\n  function handleClick(e) {\n    if (!props.handleClick) return;\n    props.handleClick(props.id);\n  }\n\n  const style = {\n    backgroundColor: props.showColor || props.matched ? props.color : 'grey',\n  };\n\n  return (\n    <div className=\"card\" onClick={handleClick} style={style} />\n  );\n}\n\nCard.propTypes = {\n  color: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  handleClick: PropTypes.func,\n  showColor: PropTypes.bool,\n};\n\nexport default Card;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './WinnerBanner.css';\n\nfunction WinnerBanner(props) {\n  if (!props.showBanner) return null;\n  return (\n    <div className=\"winner-banner\">\n      Winner!\n      <button className=\"winner-banner__play-again-btn\" type=\"button\" onClick={props.onClick}>Play Again?</button>\n    </div>\n  );\n}\n\nWinnerBanner.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  showBanner: PropTypes.bool.isRequired,\n};\n\nexport default WinnerBanner;","import React from 'react';\nimport './Instructions.css';\n\nfunction Instructions(props) {\n  return (\n    <div className=\"instructions\">\n      <h2>Welcome to the Memory Game!</h2>\n      <p>Rules for gameplay:</p>\n      <ol className=\"instructions__gameplay-list\">\n        <li>Click a card to reveal the color of the card.</li>\n        <li>Click another card, if the colors are the same, the colors will stay revealed. If the colors are different, both cards will return back to a grey color.</li>\n        <li>The game is finished when all of the cards have been successfully revealed.</li>\n      </ol>\n    </div>\n  );\n}\n\nexport default Instructions;","import React from 'react';\nimport Header from './Header';\nimport Card from './Card';\nimport WinnerBanner from './WinnerBanner';\nimport Instructions from './Instructions';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.NUM_CARDS = 16;\n    this.NUM_ROUNDS = this.NUM_CARDS / 2;\n    this.colors = this.createColorsArray();\n    this.numClicks = 0;\n    this.matched = false;\n    this.state = {\n      cards: this.createCards(),\n      lastClickedCardId: null,\n    };\n  }\n\n  createColorsArray = () => {\n\n    let basicColors = [\n      'red',\n      'orange',\n      'yellow',\n      'green',\n      'blue',\n      'purple',\n      'pink',\n      'brown',\n    ];\n\n    const colors = [];\n\n    const getRandomColorIndex = () => Math.floor(Math.random() * basicColors.length);\n    \n    for (let i = 1; i <= this.NUM_CARDS; i++) {\n      let color = basicColors[getRandomColorIndex()];\n      if (colors.includes(color)) {\n        basicColors = basicColors.filter(basicColor => basicColor !== color);\n      }\n      colors.push(color);\n    }\n\n    return colors;\n\n  };\n\n  createCards = () => {\n\n    return (this.colors.map((color, i) => (\n      <Card key={i} handleClick={this.handleClick} id={i} color={color}/>\n    )));\n\n  };\n\n  handleClick = id => {\n   \n    this.numClicks++;\n\n    if (this.state.lastClickedCardId === id) return;\n   \n    this.setState(state => {\n\n      state.cards[id] = (\n        <Card \n          key={id} \n          handleClick={null} \n          id={id} \n          color={this.colors[id]} \n          showColor={true} \n        />\n      );\n\n      if (state.lastClickedCardId === null) {\n        state.lastClickedCardId = id;\n        return state;\n      }\n\n      if (this.colors[id] === this.colors[state.lastClickedCardId]) {\n        this.matched = true;\n      } \n\n      return state;\n  \n    });\n\n    if (this.numClicks > 1) {\n      this.numClicks = 0;\n      this.checkForMatchedCards(id);\n    }\n  \n  };\n\n  checkForMatchedCards = id => {\n\n    setTimeout(() => {\n\n      this.setState(state => {\n\n        if (this.matched) {\n          state.lastClickedCardId = null;\n          this.matched = false;\n          this.NUM_ROUNDS--;\n          return state;\n        }\n\n        state.cards[id] = (\n          <Card \n            key={id} \n            handleClick={this.handleClick} \n            id={id} \n            color={this.colors[id]} \n            showColor={false} \n          />\n        );\n      \n        state.cards[state.lastClickedCardId] = (\n          <Card \n            key={state.lastClickedCardId} \n            handleClick={this.handleClick} \n            id={state.lastClickedCardId} \n            color={this.colors[state.lastClickedCardId]} \n            showColor={false} \n          />\n        );\n\n        state.lastClickedCardId = null;\n\n        return state;\n      \n      });\n    }, 300);\n    \n  };\n\n  initNewGame = () => {\n    this.colors = this.createColorsArray();\n    this.numClicks = 0;\n    this.NUM_ROUNDS = this.NUM_CARDS / 2;\n    this.matched = false;\n    this.setState({\n      cards: this.createCards(),\n      lastClickedCardId: null,\n    });\n  };\n  \n  render() {\n    return (\n      <div>\n        {!this.NUM_ROUNDS ? <div className=\"grey-out\" /> : null}\n        <div className=\"app\">\n          <WinnerBanner \n            onClick={this.initNewGame} \n            showBanner={!this.NUM_ROUNDS} \n          />\n          <Header onClick={this.initNewGame} />\n          <div className=\"card-container\">\n            {this.state.cards}\n          </div>\n          <Instructions />\n        </div>\n      </div>\n    );  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}